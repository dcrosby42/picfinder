// Code generated by protoc-gen-go. DO NOT EDIT.
// source: picfinder.proto

/*
Package picfinder_grpc is a generated protocol buffer package.

It is generated from these files:
	picfinder.proto

It has these top-level messages:
	RequestHeader
	ResponseHeader
	PingRequest
	PingResponse
	FileInfo
	AddFileRequest
	AddFileResponse
*/
package picfinder_grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RequestHeader struct {
}

func (m *RequestHeader) Reset()                    { *m = RequestHeader{} }
func (m *RequestHeader) String() string            { return proto.CompactTextString(m) }
func (*RequestHeader) ProtoMessage()               {}
func (*RequestHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ResponseHeader struct {
	Status  uint32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *ResponseHeader) Reset()                    { *m = ResponseHeader{} }
func (m *ResponseHeader) String() string            { return proto.CompactTextString(m) }
func (*ResponseHeader) ProtoMessage()               {}
func (*ResponseHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ResponseHeader) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ResponseHeader) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PingRequest struct {
	Header *RequestHeader `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PingRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type PingResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PingResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type FileInfo struct {
	Id                 int64  `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Host               string `protobuf:"bytes,2,opt,name=Host" json:"Host,omitempty"`
	Path               []byte `protobuf:"bytes,3,opt,name=Path,proto3" json:"Path,omitempty"`
	PathHash           uint32 `protobuf:"varint,4,opt,name=PathHash" json:"PathHash,omitempty"`
	Size               int64  `protobuf:"varint,5,opt,name=Size" json:"Size,omitempty"`
	ContentHash        []byte `protobuf:"bytes,6,opt,name=ContentHash,proto3" json:"ContentHash,omitempty"`
	ContentHashLower32 uint32 `protobuf:"varint,7,opt,name=ContentHashLower32" json:"ContentHashLower32,omitempty"`
	Type               string `protobuf:"bytes,8,opt,name=Type" json:"Type,omitempty"`
	Kind               string `protobuf:"bytes,9,opt,name=Kind" json:"Kind,omitempty"`
	ScannedAtUnix      int64  `protobuf:"varint,10,opt,name=ScannedAtUnix" json:"ScannedAtUnix,omitempty"`
	FileModifiedAtUnix int64  `protobuf:"varint,11,opt,name=FileModifiedAtUnix" json:"FileModifiedAtUnix,omitempty"`
}

func (m *FileInfo) Reset()                    { *m = FileInfo{} }
func (m *FileInfo) String() string            { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()               {}
func (*FileInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FileInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FileInfo) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *FileInfo) GetPath() []byte {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *FileInfo) GetPathHash() uint32 {
	if m != nil {
		return m.PathHash
	}
	return 0
}

func (m *FileInfo) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *FileInfo) GetContentHash() []byte {
	if m != nil {
		return m.ContentHash
	}
	return nil
}

func (m *FileInfo) GetContentHashLower32() uint32 {
	if m != nil {
		return m.ContentHashLower32
	}
	return 0
}

func (m *FileInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *FileInfo) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *FileInfo) GetScannedAtUnix() int64 {
	if m != nil {
		return m.ScannedAtUnix
	}
	return 0
}

func (m *FileInfo) GetFileModifiedAtUnix() int64 {
	if m != nil {
		return m.FileModifiedAtUnix
	}
	return 0
}

type AddFileRequest struct {
	Header   *RequestHeader `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
	FileInfo *FileInfo      `protobuf:"bytes,2,opt,name=FileInfo" json:"FileInfo,omitempty"`
}

func (m *AddFileRequest) Reset()                    { *m = AddFileRequest{} }
func (m *AddFileRequest) String() string            { return proto.CompactTextString(m) }
func (*AddFileRequest) ProtoMessage()               {}
func (*AddFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AddFileRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AddFileRequest) GetFileInfo() *FileInfo {
	if m != nil {
		return m.FileInfo
	}
	return nil
}

type AddFileResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
	FileId int64           `protobuf:"varint,2,opt,name=FileId" json:"FileId,omitempty"`
}

func (m *AddFileResponse) Reset()                    { *m = AddFileResponse{} }
func (m *AddFileResponse) String() string            { return proto.CompactTextString(m) }
func (*AddFileResponse) ProtoMessage()               {}
func (*AddFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AddFileResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AddFileResponse) GetFileId() int64 {
	if m != nil {
		return m.FileId
	}
	return 0
}

func init() {
	proto.RegisterType((*RequestHeader)(nil), "picfinder_grpc.RequestHeader")
	proto.RegisterType((*ResponseHeader)(nil), "picfinder_grpc.ResponseHeader")
	proto.RegisterType((*PingRequest)(nil), "picfinder_grpc.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "picfinder_grpc.PingResponse")
	proto.RegisterType((*FileInfo)(nil), "picfinder_grpc.FileInfo")
	proto.RegisterType((*AddFileRequest)(nil), "picfinder_grpc.AddFileRequest")
	proto.RegisterType((*AddFileResponse)(nil), "picfinder_grpc.AddFileResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Picfinder service

type PicfinderClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	AddFile(ctx context.Context, in *AddFileRequest, opts ...grpc.CallOption) (*AddFileResponse, error)
}

type picfinderClient struct {
	cc *grpc.ClientConn
}

func NewPicfinderClient(cc *grpc.ClientConn) PicfinderClient {
	return &picfinderClient{cc}
}

func (c *picfinderClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/picfinder_grpc.Picfinder/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *picfinderClient) AddFile(ctx context.Context, in *AddFileRequest, opts ...grpc.CallOption) (*AddFileResponse, error) {
	out := new(AddFileResponse)
	err := grpc.Invoke(ctx, "/picfinder_grpc.Picfinder/AddFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Picfinder service

type PicfinderServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	AddFile(context.Context, *AddFileRequest) (*AddFileResponse, error)
}

func RegisterPicfinderServer(s *grpc.Server, srv PicfinderServer) {
	s.RegisterService(&_Picfinder_serviceDesc, srv)
}

func _Picfinder_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PicfinderServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/picfinder_grpc.Picfinder/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PicfinderServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Picfinder_AddFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PicfinderServer).AddFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/picfinder_grpc.Picfinder/AddFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PicfinderServer).AddFile(ctx, req.(*AddFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Picfinder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "picfinder_grpc.Picfinder",
	HandlerType: (*PicfinderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Picfinder_Ping_Handler,
		},
		{
			MethodName: "AddFile",
			Handler:    _Picfinder_AddFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "picfinder.proto",
}

func init() { proto.RegisterFile("picfinder.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 428 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0x4b, 0x6f, 0xd3, 0x40,
	0x10, 0xc7, 0x71, 0x12, 0xf2, 0x18, 0x37, 0x89, 0x34, 0x07, 0xb4, 0x0a, 0x2f, 0xcb, 0xe2, 0x90,
	0x93, 0x0f, 0x2e, 0x70, 0x2f, 0x45, 0x55, 0x22, 0x8a, 0x14, 0x6d, 0xe1, 0x8c, 0x4c, 0x76, 0x93,
	0xae, 0x04, 0xbb, 0xc6, 0xbb, 0x15, 0x0f, 0x89, 0xaf, 0xc2, 0x87, 0xe1, 0x93, 0xa1, 0x1d, 0x3f,
	0xb0, 0xd3, 0xf4, 0xd4, 0x53, 0x66, 0xfe, 0x33, 0xfe, 0xcd, 0x3f, 0xe3, 0x31, 0xcc, 0x73, 0xb5,
	0xdd, 0x29, 0x2d, 0x64, 0x91, 0xe4, 0x85, 0x71, 0x06, 0x67, 0x8d, 0xf0, 0x69, 0x5f, 0xe4, 0xdb,
	0x78, 0x0e, 0x53, 0x2e, 0xbf, 0xdd, 0x48, 0xeb, 0x56, 0x32, 0x13, 0xb2, 0x88, 0xdf, 0xc0, 0x8c,
	0x4b, 0x9b, 0x1b, 0x6d, 0x65, 0xa9, 0xe0, 0x23, 0x18, 0x5a, 0x97, 0xb9, 0x1b, 0xcb, 0x82, 0x28,
	0x58, 0x4e, 0x79, 0x95, 0x21, 0x83, 0xd1, 0x57, 0x69, 0x6d, 0xb6, 0x97, 0xac, 0x17, 0x05, 0xcb,
	0x09, 0xaf, 0xd3, 0xf8, 0x2d, 0x84, 0x1b, 0xa5, 0xf7, 0x15, 0x18, 0x5f, 0xc1, 0xb0, 0x44, 0x11,
	0x20, 0x4c, 0x9f, 0x26, 0x5d, 0x13, 0x49, 0xc7, 0x01, 0xaf, 0x9a, 0xe3, 0x0b, 0x38, 0x29, 0x29,
	0xa5, 0x1b, 0x7c, 0x7d, 0x80, 0x79, 0x76, 0x1b, 0xd3, 0xf6, 0xdd, 0x70, 0xfe, 0xf6, 0x60, 0x7c,
	0xa1, 0xbe, 0xc8, 0xb5, 0xde, 0x19, 0x9c, 0x41, 0x6f, 0x2d, 0x08, 0xd0, 0xe7, 0xbd, 0xb5, 0x40,
	0x84, 0xc1, 0xca, 0x58, 0x57, 0xfd, 0x03, 0x8a, 0xbd, 0xb6, 0xc9, 0xdc, 0x35, 0xeb, 0x47, 0xc1,
	0xf2, 0x84, 0x53, 0x8c, 0x0b, 0x18, 0xfb, 0xdf, 0x55, 0x66, 0xaf, 0xd9, 0x80, 0xd6, 0xd0, 0xe4,
	0xbe, 0xff, 0x4a, 0xfd, 0x92, 0xec, 0x21, 0x51, 0x29, 0xc6, 0x08, 0xc2, 0x73, 0xa3, 0x9d, 0xd4,
	0x8e, 0x1e, 0x19, 0x12, 0xaa, 0x2d, 0x61, 0x02, 0xd8, 0x4a, 0x2f, 0xcd, 0x77, 0x59, 0x9c, 0xa6,
	0x6c, 0x44, 0xec, 0x23, 0x15, 0x3f, 0xe5, 0xc3, 0xcf, 0x5c, 0xb2, 0x71, 0xe9, 0xd4, 0xc7, 0x5e,
	0x7b, 0xa7, 0xb4, 0x60, 0x93, 0x52, 0xf3, 0x31, 0xbe, 0x80, 0xe9, 0xd5, 0x36, 0xd3, 0x5a, 0x8a,
	0x33, 0xf7, 0x51, 0xab, 0x1f, 0x0c, 0xc8, 0x56, 0x57, 0xf4, 0xd3, 0xfd, 0x4e, 0xde, 0x1b, 0xa1,
	0x76, 0xaa, 0x69, 0x0d, 0xa9, 0xf5, 0x48, 0x25, 0xfe, 0x0d, 0xb3, 0x33, 0x21, 0x7c, 0xe1, 0x7e,
	0x6f, 0x15, 0x5f, 0xfe, 0x7f, 0x19, 0xb4, 0xf4, 0x30, 0x65, 0x87, 0x0f, 0xd6, 0x75, 0xde, 0x74,
	0xc6, 0x19, 0xcc, 0x9b, 0xf1, 0xf7, 0x3b, 0x07, 0x7f, 0xce, 0x84, 0x15, 0x34, 0xbe, 0xcf, 0xab,
	0x2c, 0xfd, 0x13, 0xc0, 0x64, 0x53, 0x13, 0xf0, 0x1c, 0x06, 0xfe, 0xf8, 0xf0, 0xf1, 0x21, 0xb5,
	0x75, 0xd8, 0x8b, 0x27, 0xc7, 0x8b, 0xe5, 0xd8, 0xf8, 0x01, 0x5e, 0xc2, 0xa8, 0x72, 0x8d, 0xb7,
	0xdc, 0x75, 0xb7, 0xb9, 0x78, 0x7e, 0x67, 0xbd, 0xa6, 0x7d, 0x1e, 0xd2, 0x17, 0x7c, 0xfa, 0x2f,
	0x00, 0x00, 0xff, 0xff, 0xbb, 0x5c, 0x54, 0x54, 0xd4, 0x03, 0x00, 0x00,
}
