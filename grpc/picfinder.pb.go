// Code generated by protoc-gen-go. DO NOT EDIT.
// source: picfinder.proto

/*
Package picfinder_grpc is a generated protocol buffer package.

It is generated from these files:
	picfinder.proto

It has these top-level messages:
	RequestHeader
	ResponseHeader
	PingRequest
	PingResponse
	FileInfo
	AddFileRequest
	AddFileResponse
	Sandbox_GetDataRequest
	Sandbox_GetDataResponse
*/
package picfinder_grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Sandbox_GetDataRequest_Mode int32

const (
	Sandbox_GetDataRequest_LoadIfNewer    Sandbox_GetDataRequest_Mode = 0
	Sandbox_GetDataRequest_ForceLoad      Sandbox_GetDataRequest_Mode = 1
	Sandbox_GetDataRequest_JustGetVersion Sandbox_GetDataRequest_Mode = 2
)

var Sandbox_GetDataRequest_Mode_name = map[int32]string{
	0: "LoadIfNewer",
	1: "ForceLoad",
	2: "JustGetVersion",
}
var Sandbox_GetDataRequest_Mode_value = map[string]int32{
	"LoadIfNewer":    0,
	"ForceLoad":      1,
	"JustGetVersion": 2,
}

func (x Sandbox_GetDataRequest_Mode) String() string {
	return proto.EnumName(Sandbox_GetDataRequest_Mode_name, int32(x))
}
func (Sandbox_GetDataRequest_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{7, 0}
}

type RequestHeader struct {
}

func (m *RequestHeader) Reset()                    { *m = RequestHeader{} }
func (m *RequestHeader) String() string            { return proto.CompactTextString(m) }
func (*RequestHeader) ProtoMessage()               {}
func (*RequestHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ResponseHeader struct {
	Status  uint32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *ResponseHeader) Reset()                    { *m = ResponseHeader{} }
func (m *ResponseHeader) String() string            { return proto.CompactTextString(m) }
func (*ResponseHeader) ProtoMessage()               {}
func (*ResponseHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ResponseHeader) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ResponseHeader) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PingRequest struct {
	Header *RequestHeader `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PingRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type PingResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PingResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type FileInfo struct {
	Id                 int64  `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Host               string `protobuf:"bytes,2,opt,name=Host" json:"Host,omitempty"`
	Path               []byte `protobuf:"bytes,3,opt,name=Path,proto3" json:"Path,omitempty"`
	PathHash           uint64 `protobuf:"varint,4,opt,name=PathHash" json:"PathHash,omitempty"`
	Size               int64  `protobuf:"varint,5,opt,name=Size" json:"Size,omitempty"`
	ContentHash        []byte `protobuf:"bytes,6,opt,name=ContentHash,proto3" json:"ContentHash,omitempty"`
	ContentHashLower32 uint32 `protobuf:"varint,7,opt,name=ContentHashLower32" json:"ContentHashLower32,omitempty"`
	Type               string `protobuf:"bytes,8,opt,name=Type" json:"Type,omitempty"`
	Kind               string `protobuf:"bytes,9,opt,name=Kind" json:"Kind,omitempty"`
	ScannedAtUnix      int64  `protobuf:"varint,10,opt,name=ScannedAtUnix" json:"ScannedAtUnix,omitempty"`
	FileModifiedAtUnix int64  `protobuf:"varint,11,opt,name=FileModifiedAtUnix" json:"FileModifiedAtUnix,omitempty"`
}

func (m *FileInfo) Reset()                    { *m = FileInfo{} }
func (m *FileInfo) String() string            { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()               {}
func (*FileInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FileInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FileInfo) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *FileInfo) GetPath() []byte {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *FileInfo) GetPathHash() uint64 {
	if m != nil {
		return m.PathHash
	}
	return 0
}

func (m *FileInfo) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *FileInfo) GetContentHash() []byte {
	if m != nil {
		return m.ContentHash
	}
	return nil
}

func (m *FileInfo) GetContentHashLower32() uint32 {
	if m != nil {
		return m.ContentHashLower32
	}
	return 0
}

func (m *FileInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *FileInfo) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *FileInfo) GetScannedAtUnix() int64 {
	if m != nil {
		return m.ScannedAtUnix
	}
	return 0
}

func (m *FileInfo) GetFileModifiedAtUnix() int64 {
	if m != nil {
		return m.FileModifiedAtUnix
	}
	return 0
}

type AddFileRequest struct {
	Header   *RequestHeader `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
	FileInfo *FileInfo      `protobuf:"bytes,2,opt,name=FileInfo" json:"FileInfo,omitempty"`
}

func (m *AddFileRequest) Reset()                    { *m = AddFileRequest{} }
func (m *AddFileRequest) String() string            { return proto.CompactTextString(m) }
func (*AddFileRequest) ProtoMessage()               {}
func (*AddFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AddFileRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AddFileRequest) GetFileInfo() *FileInfo {
	if m != nil {
		return m.FileInfo
	}
	return nil
}

type AddFileResponse struct {
	Header       *ResponseHeader `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
	FileId       int64           `protobuf:"varint,2,opt,name=FileId" json:"FileId,omitempty"`
	UpdateAction string          `protobuf:"bytes,3,opt,name=UpdateAction" json:"UpdateAction,omitempty"`
}

func (m *AddFileResponse) Reset()                    { *m = AddFileResponse{} }
func (m *AddFileResponse) String() string            { return proto.CompactTextString(m) }
func (*AddFileResponse) ProtoMessage()               {}
func (*AddFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AddFileResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AddFileResponse) GetFileId() int64 {
	if m != nil {
		return m.FileId
	}
	return 0
}

func (m *AddFileResponse) GetUpdateAction() string {
	if m != nil {
		return m.UpdateAction
	}
	return ""
}

type Sandbox_GetDataRequest struct {
	Header      *RequestHeader              `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
	Mode        Sandbox_GetDataRequest_Mode `protobuf:"varint,2,opt,name=mode,enum=picfinder_grpc.Sandbox_GetDataRequest_Mode" json:"mode,omitempty"`
	HaveVersion int64                       `protobuf:"varint,3,opt,name=HaveVersion" json:"HaveVersion,omitempty"`
}

func (m *Sandbox_GetDataRequest) Reset()                    { *m = Sandbox_GetDataRequest{} }
func (m *Sandbox_GetDataRequest) String() string            { return proto.CompactTextString(m) }
func (*Sandbox_GetDataRequest) ProtoMessage()               {}
func (*Sandbox_GetDataRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Sandbox_GetDataRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Sandbox_GetDataRequest) GetMode() Sandbox_GetDataRequest_Mode {
	if m != nil {
		return m.Mode
	}
	return Sandbox_GetDataRequest_LoadIfNewer
}

func (m *Sandbox_GetDataRequest) GetHaveVersion() int64 {
	if m != nil {
		return m.HaveVersion
	}
	return 0
}

type Sandbox_GetDataResponse struct {
	Header   *ResponseHeader `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
	Version  int64           `protobuf:"varint,2,opt,name=Version" json:"Version,omitempty"`
	UpToDate bool            `protobuf:"varint,3,opt,name=UpToDate" json:"UpToDate,omitempty"`
	Data     []byte          `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *Sandbox_GetDataResponse) Reset()                    { *m = Sandbox_GetDataResponse{} }
func (m *Sandbox_GetDataResponse) String() string            { return proto.CompactTextString(m) }
func (*Sandbox_GetDataResponse) ProtoMessage()               {}
func (*Sandbox_GetDataResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Sandbox_GetDataResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Sandbox_GetDataResponse) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Sandbox_GetDataResponse) GetUpToDate() bool {
	if m != nil {
		return m.UpToDate
	}
	return false
}

func (m *Sandbox_GetDataResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestHeader)(nil), "picfinder_grpc.RequestHeader")
	proto.RegisterType((*ResponseHeader)(nil), "picfinder_grpc.ResponseHeader")
	proto.RegisterType((*PingRequest)(nil), "picfinder_grpc.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "picfinder_grpc.PingResponse")
	proto.RegisterType((*FileInfo)(nil), "picfinder_grpc.FileInfo")
	proto.RegisterType((*AddFileRequest)(nil), "picfinder_grpc.AddFileRequest")
	proto.RegisterType((*AddFileResponse)(nil), "picfinder_grpc.AddFileResponse")
	proto.RegisterType((*Sandbox_GetDataRequest)(nil), "picfinder_grpc.Sandbox_GetDataRequest")
	proto.RegisterType((*Sandbox_GetDataResponse)(nil), "picfinder_grpc.Sandbox_GetDataResponse")
	proto.RegisterEnum("picfinder_grpc.Sandbox_GetDataRequest_Mode", Sandbox_GetDataRequest_Mode_name, Sandbox_GetDataRequest_Mode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Picfinder service

type PicfinderClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	AddFile(ctx context.Context, in *AddFileRequest, opts ...grpc.CallOption) (*AddFileResponse, error)
	Sandbox_GetData(ctx context.Context, opts ...grpc.CallOption) (Picfinder_Sandbox_GetDataClient, error)
}

type picfinderClient struct {
	cc *grpc.ClientConn
}

func NewPicfinderClient(cc *grpc.ClientConn) PicfinderClient {
	return &picfinderClient{cc}
}

func (c *picfinderClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/picfinder_grpc.Picfinder/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *picfinderClient) AddFile(ctx context.Context, in *AddFileRequest, opts ...grpc.CallOption) (*AddFileResponse, error) {
	out := new(AddFileResponse)
	err := grpc.Invoke(ctx, "/picfinder_grpc.Picfinder/AddFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *picfinderClient) Sandbox_GetData(ctx context.Context, opts ...grpc.CallOption) (Picfinder_Sandbox_GetDataClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Picfinder_serviceDesc.Streams[0], c.cc, "/picfinder_grpc.Picfinder/Sandbox_GetData", opts...)
	if err != nil {
		return nil, err
	}
	x := &picfinderSandbox_GetDataClient{stream}
	return x, nil
}

type Picfinder_Sandbox_GetDataClient interface {
	Send(*Sandbox_GetDataRequest) error
	Recv() (*Sandbox_GetDataResponse, error)
	grpc.ClientStream
}

type picfinderSandbox_GetDataClient struct {
	grpc.ClientStream
}

func (x *picfinderSandbox_GetDataClient) Send(m *Sandbox_GetDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *picfinderSandbox_GetDataClient) Recv() (*Sandbox_GetDataResponse, error) {
	m := new(Sandbox_GetDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Picfinder service

type PicfinderServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	AddFile(context.Context, *AddFileRequest) (*AddFileResponse, error)
	Sandbox_GetData(Picfinder_Sandbox_GetDataServer) error
}

func RegisterPicfinderServer(s *grpc.Server, srv PicfinderServer) {
	s.RegisterService(&_Picfinder_serviceDesc, srv)
}

func _Picfinder_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PicfinderServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/picfinder_grpc.Picfinder/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PicfinderServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Picfinder_AddFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PicfinderServer).AddFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/picfinder_grpc.Picfinder/AddFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PicfinderServer).AddFile(ctx, req.(*AddFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Picfinder_Sandbox_GetData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PicfinderServer).Sandbox_GetData(&picfinderSandbox_GetDataServer{stream})
}

type Picfinder_Sandbox_GetDataServer interface {
	Send(*Sandbox_GetDataResponse) error
	Recv() (*Sandbox_GetDataRequest, error)
	grpc.ServerStream
}

type picfinderSandbox_GetDataServer struct {
	grpc.ServerStream
}

func (x *picfinderSandbox_GetDataServer) Send(m *Sandbox_GetDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *picfinderSandbox_GetDataServer) Recv() (*Sandbox_GetDataRequest, error) {
	m := new(Sandbox_GetDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Picfinder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "picfinder_grpc.Picfinder",
	HandlerType: (*PicfinderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Picfinder_Ping_Handler,
		},
		{
			MethodName: "AddFile",
			Handler:    _Picfinder_AddFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sandbox_GetData",
			Handler:       _Picfinder_Sandbox_GetData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "picfinder.proto",
}

func init() { proto.RegisterFile("picfinder.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 611 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xdb, 0x6e, 0x13, 0x31,
	0x10, 0xed, 0x26, 0x21, 0x97, 0xc9, 0xad, 0x9a, 0x87, 0x62, 0x85, 0x5b, 0xb4, 0x42, 0x10, 0x09,
	0x29, 0x42, 0x29, 0xf0, 0xc0, 0x0b, 0x2a, 0xad, 0xda, 0x04, 0x5a, 0x54, 0xb9, 0x2d, 0xaf, 0x95,
	0x1b, 0x4f, 0xda, 0x95, 0xa8, 0xbd, 0xec, 0xba, 0xb4, 0x20, 0xf1, 0x88, 0xc4, 0x3f, 0xf0, 0x37,
	0x7c, 0x10, 0xdf, 0x80, 0xec, 0xbd, 0x90, 0x1b, 0x02, 0x29, 0x4f, 0x3b, 0x73, 0x66, 0x7c, 0xe6,
	0xec, 0xcc, 0xd8, 0xd0, 0x0e, 0x83, 0xf1, 0x24, 0x50, 0x92, 0xa2, 0x7e, 0x18, 0x69, 0xa3, 0xb1,
	0x95, 0x03, 0xa7, 0xe7, 0x51, 0x38, 0xf6, 0xdb, 0xd0, 0xe4, 0xf4, 0xf1, 0x8a, 0x62, 0x33, 0x24,
	0x21, 0x29, 0xf2, 0x5f, 0x43, 0x8b, 0x53, 0x1c, 0x6a, 0x15, 0x53, 0x82, 0xe0, 0x06, 0x94, 0x63,
	0x23, 0xcc, 0x55, 0xcc, 0xbc, 0xae, 0xd7, 0x6b, 0xf2, 0xd4, 0x43, 0x06, 0x95, 0x4b, 0x8a, 0x63,
	0x71, 0x4e, 0xac, 0xd0, 0xf5, 0x7a, 0x35, 0x9e, 0xb9, 0xfe, 0x0e, 0xd4, 0x0f, 0x03, 0x75, 0x9e,
	0x12, 0xe3, 0x73, 0x28, 0x27, 0x54, 0x8e, 0xa0, 0x3e, 0xb8, 0xd7, 0x9f, 0x15, 0xd1, 0x9f, 0x51,
	0xc0, 0xd3, 0x64, 0x7f, 0x17, 0x1a, 0x09, 0x4b, 0xa2, 0x06, 0x5f, 0xcc, 0xd1, 0xdc, 0x5f, 0xa4,
	0x99, 0xd6, 0x9d, 0xf3, 0xfc, 0x2c, 0x40, 0x75, 0x37, 0xf8, 0x40, 0x23, 0x35, 0xd1, 0xd8, 0x82,
	0xc2, 0x48, 0x3a, 0x82, 0x22, 0x2f, 0x8c, 0x24, 0x22, 0x94, 0x86, 0x3a, 0x36, 0xe9, 0x1f, 0x38,
	0xdb, 0x62, 0x87, 0xc2, 0x5c, 0xb0, 0x62, 0xd7, 0xeb, 0x35, 0xb8, 0xb3, 0xb1, 0x03, 0x55, 0xfb,
	0x1d, 0x8a, 0xf8, 0x82, 0x95, 0xba, 0x5e, 0xaf, 0xc4, 0x73, 0xdf, 0xe6, 0x1f, 0x05, 0x5f, 0x88,
	0xdd, 0x72, 0xac, 0xce, 0xc6, 0x2e, 0xd4, 0xb7, 0xb5, 0x32, 0xa4, 0x8c, 0x3b, 0x52, 0x76, 0x54,
	0xd3, 0x10, 0xf6, 0x01, 0xa7, 0xdc, 0x7d, 0x7d, 0x4d, 0xd1, 0xe6, 0x80, 0x55, 0x5c, 0x8b, 0x97,
	0x44, 0x6c, 0x95, 0xe3, 0xcf, 0x21, 0xb1, 0x6a, 0xa2, 0xd4, 0xda, 0x16, 0x7b, 0x1b, 0x28, 0xc9,
	0x6a, 0x09, 0x66, 0x6d, 0x7c, 0x08, 0xcd, 0xa3, 0xb1, 0x50, 0x8a, 0xe4, 0x96, 0x39, 0x51, 0xc1,
	0x0d, 0x03, 0x27, 0x6b, 0x16, 0xb4, 0xd5, 0x6d, 0x4f, 0x0e, 0xb4, 0x0c, 0x26, 0x41, 0x9e, 0x5a,
	0x77, 0xa9, 0x4b, 0x22, 0xfe, 0x57, 0x68, 0x6d, 0x49, 0x69, 0x03, 0xab, 0x4d, 0x15, 0x9f, 0xfd,
	0x19, 0x86, 0x6b, 0x7a, 0x7d, 0xc0, 0xe6, 0x0f, 0x66, 0x71, 0x9e, 0x67, 0xfa, 0xdf, 0x3c, 0x68,
	0xe7, 0xf5, 0x57, 0xdb, 0x07, 0xbb, 0xcf, 0x8e, 0x57, 0xba, 0xfa, 0x45, 0x9e, 0x7a, 0xe8, 0x43,
	0xe3, 0x24, 0x94, 0xc2, 0xd0, 0xd6, 0xd8, 0x04, 0x5a, 0xb9, 0xf1, 0xd7, 0xf8, 0x0c, 0xe6, 0xff,
	0xf2, 0x60, 0xe3, 0x48, 0x28, 0x79, 0xa6, 0x6f, 0x4e, 0xf7, 0xc8, 0xec, 0x08, 0x23, 0x56, 0xec,
	0xc7, 0x2b, 0x28, 0x5d, 0x6a, 0x99, 0x5c, 0xa1, 0xd6, 0xe0, 0xc9, 0xfc, 0xa1, 0xe5, 0xc5, 0xfa,
	0x07, 0x5a, 0x12, 0x77, 0x07, 0xed, 0xa6, 0x0d, 0xc5, 0x27, 0x7a, 0x4f, 0x51, 0x9c, 0xa9, 0x2e,
	0xf2, 0x69, 0xc8, 0x7f, 0x09, 0x25, 0x9b, 0x8f, 0x6d, 0xa8, 0xef, 0x6b, 0x21, 0x47, 0x93, 0x77,
	0x74, 0x4d, 0xd1, 0xfa, 0x1a, 0x36, 0xa1, 0xb6, 0xab, 0xa3, 0x31, 0x59, 0x74, 0xdd, 0x43, 0x84,
	0xd6, 0x9b, 0xab, 0xd8, 0xec, 0x91, 0x49, 0x4f, 0xae, 0x17, 0xfc, 0x1f, 0x1e, 0xdc, 0x5e, 0xd0,
	0xb0, 0xe2, 0x00, 0x18, 0x54, 0x32, 0xb5, 0xc9, 0x04, 0x32, 0xd7, 0xde, 0xb2, 0x93, 0xf0, 0x58,
	0xef, 0x08, 0x43, 0xee, 0x47, 0xaa, 0x3c, 0xf7, 0xed, 0xae, 0xdb, 0xea, 0xee, 0xf6, 0x35, 0xb8,
	0xb3, 0x07, 0xdf, 0x0b, 0x50, 0x3b, 0xcc, 0x6a, 0xe2, 0x36, 0x94, 0xec, 0x83, 0x81, 0x77, 0xe6,
	0x75, 0x4c, 0x3d, 0x46, 0x9d, 0xbb, 0xcb, 0x83, 0x89, 0x50, 0x7f, 0x0d, 0xf7, 0xa1, 0x92, 0x2e,
	0x1a, 0x2e, 0xfc, 0xcf, 0xec, 0x0d, 0xe8, 0x3c, 0xf8, 0x6b, 0x3c, 0x67, 0xbb, 0x80, 0xf6, 0x5c,
	0xf7, 0xf0, 0xd1, 0xff, 0x8d, 0xb8, 0xf3, 0xf8, 0x9f, 0x79, 0x59, 0x95, 0x9e, 0xf7, 0xd4, 0x3b,
	0x2b, 0xbb, 0xf7, 0x7d, 0xf3, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd5, 0xd2, 0xfa, 0xe3, 0xf2,
	0x05, 0x00, 0x00,
}
